import gc
import math

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
plt.style.use("fivethirtyeight")

from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.impute import KNNImputer
from sklearn.model_selection import train_test_split, StratifiedKFold
from sklearn.linear_model import LogisticRegression
from lightgbm import LGBMClassifier
from xgboost import XGBClassifier

from imblearn.over_sampling import SMOTE

from sklearn.metrics import classification_report, roc_auc_score

from sklearn.metrics import classification_report, roc_auc_score, recall_score, precision_score, accuracy_score, confusion_matrix


import warnings
warnings.filterwarnings('ignore')

pd.set_option("display.max_rows",None)
pd.set_option("display.max_columns",None)
df = pd.read_csv("diabetes_data.csv")
df.head()
print(f'No. Of Rows {df.shape[0]}')
print(f'No. Of Columns {df.shape[1]}')
#Outlier Detection

from collections import Counter
def detect_outliers(df,n,features):
    """
    Takes a dataframe df of features and returns a list of the indices
    corresponding to the observations containing more than n outliers according
    to the Tukey method.
    """
    outlier_indices = []
    
    # iterate over features(columns)
    for col in features:
        # 1st quartile (25%)
        Q1 = np.percentile(df[col], 25)
        # 3rd quartile (75%)
        Q3 = np.percentile(df[col],75)
        # Interquartile range (IQR)
        IQR = Q3 - Q1
        
        # outlier step
        outlier_step = 1.5 * IQR
        
        # Determine a list of indices of outliers for feature col
        outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step )].index
        
        # append the found outlier indices for col to the list of outlier indices 
        outlier_indices.extend(outlier_list_col)
        
    # select observations containing more than 2 outliers
    outlier_indices = Counter(outlier_indices)        
    multiple_outliers = list( k for k, v in outlier_indices.items() if v > n )
    
    return multiple_outliers   

# detect outliers from Pregnancies', 'Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age'
Outliers_to_drop = detect_outliers(df,2,['Pregnancies', 'Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age'])
df.head()
def Scaler(x):
    scaler = StandardScaler()
    scaled_data = scaler.fit_transform(x)
    scaled_data = pd.DataFrame(scaled_data, columns = df.columns)
    return scaled_data

#target = df["stroke"].copy()
#del df["Target"]


df = Scaler(df)
df.head()
